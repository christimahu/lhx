#!/bin/bash

# ====================================================================================
#
#                 Kubernetes Worker Node Setup (k8s_worker.sh)
#
# ====================================================================================
#
#  Purpose:
#  --------
#  This script securely joins a prepared node to an existing Kubernetes cluster
#  as either a worker or an additional control plane node.
#
#  Tutorial Goal:
#  --------------
#  The final step in expanding our cluster is to join our prepared nodes to the
#  control plane. This is done using the `kubeadm join` command. This command is
#  unique to your cluster and contains a temporary security token to ensure only
#  authorized machines can join. This script provides a safe and interactive way
#  to execute that command.
#
#  Workflow:
#  ---------
#  1. Run `init_headless.sh` and `k8s_node.sh` on this machine.
#  2. On your FIRST control plane node, run `k8s_control_plane.sh`.
#  3. Copy the `kubeadm join...` command that was output by the control plane script.
#  4. Run this script (`k8s_worker.sh`) on your new node and paste the command when prompted.
#
# ====================================================================================


# --- Helper Functions for Better Output ---

readonly C_RESET='\033[0m'
readonly C_RED='\033[0;31m'
readonly C_GREEN='\033[0;32m'
readonly C_YELLOW='\033[0;33m'

print_success() {
    echo -e "${C_GREEN}[OK] $1${C_RESET}"
}
print_error() {
    echo -e "${C_RED}[ERROR] $1${C_RESET}"
}
print_info() {
    echo -e "${C_YELLOW}[INFO] $1${C_RESET}"
}
print_border() {
    echo ""
    echo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
    echo " $1"
    echo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
}


# --- Initial Sanity Checks ---

print_border "Step 0: Pre-flight Checks"

if [ "$(id -u)" -ne 0 ]; then
    print_error "This script must be run with root privileges. Please use 'sudo'."
    exit 1
fi
print_success "Running as root."


# --- Part 1: Join the Cluster ---

print_border "Step 1: Join this Node to the Kubernetes Cluster"

# --- Tutorial: The `kubeadm join` Command ---
# The `kubeadm join` command is generated by the `kubeadm init` process on the
# control plane. It contains three key pieces of information:
# 1. The IP address and port of the Kubernetes API server.
# 2. A bootstrap token that provides temporary, secure access for a new node to
#    introduce itself to the cluster.
# 3. A hash of the cluster's root CA certificate, which the new node uses to
#    verify it is talking to the correct, trusted control plane.
#
# Because this command is sensitive and specific to your cluster, we don't hardcode
# it. Instead, we prompt you to paste the full command here.
# ---
print_info "This script will now execute the 'kubeadm join' command."
echo "Please paste the full 'sudo kubeadm join...' command that was generated"
echo "by the 'k8s_control_plane.sh' script on your master node."
echo "It will look something like this:"
echo "  sudo kubeadm join <control-plane-ip>:6443 --token <token> --discovery-token-ca-cert-hash sha256:<hash>"
echo ""

# We read the full command, including the 'sudo', into a variable.
read -p "> Paste the full join command here: " JOIN_COMMAND

# Basic validation to ensure the command looks plausible.
if [[ ! "$JOIN_COMMAND" == *"kubeadm join"* ]]; then
    print_error "Invalid input. The command must start with 'sudo kubeadm join'."
    exit 1
fi

# The user pastes the command with "sudo", so we don't need to add it again.
# We use `eval` to execute the command string stored in the variable.
echo "Executing join command..."
eval "$JOIN_COMMAND"

if [ $? -ne 0 ]; then
    print_error "Failed to join the cluster. Please check the output above for errors."
    exit 1
fi

print_success "This node has successfully joined the cluster!"
echo "On your control plane node, run 'kubectl get nodes' to see it."

